import requests
import json
from bs4 import BeautifulSoup
from flask import Flask, request, render_template_string

app = Flask(__name__)

# --- ‡¶ß‡¶æ‡¶™ ‡ß¶: ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def perform_login():
    """ERP ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßá‡¶∂‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶Ø‡¶º‡•§"""
    LOGIN_URL = 'http://180.92.235.190:8022/erp/login.php'
    USERNAME = 'Clothing-cutting'
    PASSWORD = '489356'
    
    login_payload = {
        'hiddenUserIP': '', 'hiddenUserMAC': '', 'txt_userid': USERNAME,
        'txt_password': PASSWORD, 'submit': 'Login',
    }
    session = requests.Session()
    try:
        login_response = session.post(LOGIN_URL, data=login_payload, timeout=15)
        login_response.raise_for_status()
        if "logout" not in login_response.text.lower():
            return None, "‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        return session, "‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§"
    except requests.exceptions.RequestException as e:
        return None, f"‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}"

# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ø‡¶æ ‡¶è‡¶ñ‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá ---
def fetch_report_data(ref_number, line_number, selected_color_id):
    """‡¶™‡ßç‡¶∞‡¶¶‡¶§‡ßç‡¶§ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    session, login_message = perform_login()
    if not session:
        return f"<p>‚ùå {login_message}</p>"

    # ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶™‡ßç‡¶∞‡¶•‡¶Æ API
    api1_url = "https://logic-job-no.onrender.com/get_info"
    params1 = {'ref': ref_number}
    response1 = session.get(api1_url, params=params1, timeout=30)
    data1 = response1.json()
    job_no = data1.get("job_no")
    company_id = data1.get("company_id")
    if not all([job_no, company_id]):
        return "<p>‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶™‡ßç‡¶∞‡¶•‡¶Æ API ‡¶•‡ßá‡¶ï‡ßá 'job_no' ‡¶¨‡¶æ 'company_id' ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§</p>"
    last_five_digits = job_no[-5:]

    # ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü API
    api2_base_url = "http://180.92.235.190:8022/erp/production/reports/requires/bundle_wise_sewing_tracking_report_controller.php"
    params2 = {'data': f"{company_id}**0**1**{last_five_digits}**0", 'action': 'search_list_view'}
    response2 = session.get(api2_base_url, params=params2, timeout=120)
    soup = BeautifulSoup(response2.text, 'html.parser')
    first_row = soup.find('table', id='tbl_list_search').find('tbody').find('tr')
    txt_job_id = first_row.get('onclick').split("'")[1].split('_')[1]

    # ‡¶ß‡¶æ‡¶™ ‡ß™: ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü
    post_data = {
        'action': 'report_generate', 'cbo_lc_company_id': company_id, 'cbo_working_company_id': '2',
        'cbo_location_id': '2', 'cbo_floor_id': '0', 'cbo_buyer_id': '0', 'txt_job_no': job_no,
        'txt_file_no': '', 'txt_int_ref': '', 'color_id': selected_color_id, 'txt_cutting_no': '',
        'txt_bunle_no': '', 'txt_date_from': '', 'txt_date_to': '', 'txt_job_id': txt_job_id,
        'txt_color_name': selected_color_id, 'type': '2'
    }
    response4 = session.post(api2_base_url, data=post_data, timeout=300)
    soup4 = BeautifulSoup(response4.text, 'html.parser')
    report_rows = soup4.find_all('tr', id=lambda x: x and x.startswith('tr_'))

    if not report_rows:
        return "<p>‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§</p>"

    results_html = ""
    overall_results_found = False
    for row in report_rows:
        cells = row.find_all('td')
        if len(cells) >= 24:
            status_col_18 = cells[18].get_text(strip=True)
            line_no_col_22 = cells[21].get_text(strip=True)
            
            if status_col_18 == 'No' and line_no_col_22 == line_number:
                overall_results_found = True
                results_html += "<hr>"
                results_html += f"<p><b>SL No:</b> {cells[0].get_text(strip=True)}</p>"
                results_html += f"<p><b>Barcode No:</b> {cells[1].get_text(strip=True)}</p>"
                results_html += f"<p><b>Size:</b> {cells[3].get_text(strip=True)}</p>"
                results_html += f"<p><b>Bundle Qty:</b> {cells[22].get_text(strip=True)}</p>"
                results_html += f"<p><b>Input Date:</b> {cells[16].get_text(strip=True)}</p>"

    if not overall_results_found:
        return f"<p>‡¶è‡¶á ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶æ‡¶á‡¶® '{line_number}' ‡¶è ‡¶ï‡ßã‡¶®‡ßã 'No' ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§</p>"
    
    return results_html

# --- ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶™‡ßá‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø HTML ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü ---
# ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶™‡ßá‡¶ú: ref ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
INPUT_PAGE_TEMPLATE = """
<!doctype html>
<html>
<head><title>Report Generator</title></head>
<body>
    <h1>‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡¶∞</h1>
    <form action="/get-colors" method="post">
        <label for="ref_number">‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá API 1 ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ref ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®:</label><br>
        <input type="text" id="ref_number" name="ref_number" required><br><br>
        <label for="line_number">‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶≤‡¶æ‡¶á‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®:</label><br>
        <input type="text" id="line_number" name="line_number" required><br><br>
        <input type="submit" value="‡¶∞‡¶ô‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®">
    </form>
</body>
</html>
"""

# ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶™‡ßá‡¶ú: ‡¶∞‡¶ô ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
COLOR_SELECTION_TEMPLATE = """
<!doctype html>
<html>
<head><title>Select Color</title></head>
<body>
    <h1>üé® ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡¶ô ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® üé®</h1>
    <form action="/generate-report" method="post">
        <input type="hidden" name="ref_number" value="{{ ref_number }}">
        <input type="hidden" name="line_number" value="{{ line_number }}">
        
        <label for="color_id">‡¶∞‡¶ô:</label>
        <select name="color_id" id="color_id">
            {% for color in colors %}
            <option value="{{ color.id }}">{{ color.name }}</option>
            {% endfor %}
        </select>
        <br><br>
        <input type="submit" value="‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®">
    </form>
    <br>
    <a href="/">‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®</a>
</body>
</html>
"""

# ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶™‡ßá‡¶ú
RESULT_TEMPLATE = """
<!doctype html>
<html>
<head><title>Report Result</title></head>
<body>
    <h1>üìä ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü (‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ) üìä</h1>
    <div>{{ content | safe }}</div>
    <br>
    <a href="/">‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®</a>
</body>
</html>
"""

# --- Flask Routes ---
@app.route('/', methods=['GET'])
def index():
    return render_template_string(INPUT_PAGE_TEMPLATE)

@app.route('/get-colors', methods=['POST'])
def get_colors():
    ref_number = request.form['ref_number']
    line_number = request.form['line_number']
    
    session, login_message = perform_login()
    if not session:
        return render_template_string(RESULT_TEMPLATE, content=f"<p>‚ùå {login_message}</p>")

    # API 1 ‡¶è‡¶¨‡¶Ç 2 ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
    api1_url = "https://logic-job-no.onrender.com/get_info"
    params1 = {'ref': ref_number}
    response1 = session.get(api1_url, params=params1, timeout=30)
    data1 = response1.json()
    job_no = data1.get("job_no")
    company_id = data1.get("company_id")
    last_five_digits = job_no[-5:]

    api2_base_url = "http://180.92.235.190:8022/erp/production/reports/requires/bundle_wise_sewing_tracking_report_controller.php"
    params2 = {'data': f"{company_id}**0**1**{last_five_digits}**0", 'action': 'search_list_view'}
    response2 = session.get(api2_base_url, params=params2, timeout=120)
    soup = BeautifulSoup(response2.text, 'html.parser')
    first_row = soup.find('table', id='tbl_list_search').find('tbody').find('tr')
    txt_job_id = first_row.get('onclick').split("'")[1].split('_')[1]

    # ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
    params3 = {'action': 'color_popup', 'txt_job_no': job_no, 'txt_job_id': txt_job_id}
    response3 = session.get(api2_base_url, params=params3, timeout=120)
    soup3 = BeautifulSoup(response3.text, 'html.parser')
    color_list = []
    color_table = soup3.find('table', id='list_view')
    if color_table:
        for row in color_table.find('tbody').find_all('tr'):
            onclick = row.get('onclick')
            cells = row.find_all('td')
            if onclick and len(cells) > 3:
                color_id = onclick.split("'")[1].split('_')[1]
                color_name = cells[3].get_text(strip=True)
                color_list.append({'id': color_id, 'name': color_name})

    if not color_list:
        return render_template_string(RESULT_TEMPLATE, content="<p>‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§</p>")

    return render_template_string(COLOR_SELECTION_TEMPLATE, colors=color_list, ref_number=ref_number, line_number=line_number)

@app.route('/generate-report', methods=['POST'])
def generate_report():
    ref_number = request.form['ref_number']
    line_number = request.form['line_number']
    selected_color_id = request.form['color_id']
    
    # ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø
    report_html = fetch_report_data(ref_number, line_number, selected_color_id)
    
    return render_template_string(RESULT_TEMPLATE, content=report_html)

if __name__ == '__main__':
    app.run(debug=True)
